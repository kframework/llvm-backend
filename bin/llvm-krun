#!/bin/bash
set -e

ARGV=()
params=()
pretty=()
output_file="$(mktemp tmp.out.XXXXXXXXXX)"
input_file="$(mktemp tmp.in.XXXXXXXXXX)"
parser_file="$(mktemp tmp.parse.XXXXXXXXXX)"
trap 'rm -rf "$input_file" "$output_file" "$parser_file"' INT TERM EXIT
initializer="LblinitGeneratedTopCell{}"
dir=.
debug=
depth=-1
pretty_print=false

while [[ $# -gt 0 ]]
do
  arg="$1"
  case $arg in
    -c)
    name="$2"
    value="$3"
    var_name="params_$name"
    pretty_name="pretty_$name"
    sort_name="sort_$name"
    params+=("$name")
    sort="$4"
    type="$5"
    printf -v "$sort_name" %s "$sort"
    case $type in
      kore)
      printf -v "$var_name" %s "$value"
      ;;
      korefile)
      printf -v "$var_name" %s "`cat "$value"`"
      ;;
      pretty)
      printf -v "$pretty_name" %s "$value"
      pretty+=("$name")
      ;;
      prettyfile)
      printf -v "$pretty_name" %s "`cat "$value"`"
      pretty+=("$name")
      ;;
    esac
    shift; shift; shift; shift; shift
    ;;

    -o|--output-file)
    real_output_file="$2"
    shift; shift
    ;;

    -p)
    pretty_print=true
    shift
    ;;

    -i|--initializer)
    initializer="$2"
    shift; shift
    ;;

    -d)
    dir="$2"
    shift; shift
    ;;

    --debug)
    debug="gdb --args "
    shift;
    ;;

    --depth)
    depth="$2"
    shift; shift
    ;;

    -v|--verbose)
    verbose=1
    shift;
    ;;

    -save-temps)
    trap - INT TERM EXIT
    shift;
    ;;
  esac
done

for name in "${pretty[@]}"; do
  var_name="params_$name"
  pretty_name="pretty_$name"
  printf %s "${!pretty_name}" | "$dir/parser_$name" /dev/stdin > "$parser_file"
  printf -v "$var_name" %s "`cat $parser_file`"
done

for name in "${params[@]}"; do
  sort_name="sort_$name"
  var_name="params_$name"
  sort="${!sort_name}"
  case $sort in
    KItem)
    ;;
    *)
    printf -v "$var_name" %s "inj{Sort$sort{}, SortKItem{}}(${!var_name})"
    ;;
  esac
done

echo "$initializer" >> $input_file

cat <<HERE >> $input_file
(
HERE

for param in "${params[@]}"; do
  cat <<HERE >> $input_file
Lbl'Unds'Map'Unds'{}(
HERE
done

cat <<HERE >> $input_file
Lbl'Stop'Map{}()
HERE

for param in "${params[@]}"; do
  cat <<HERE >> $input_file
, Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortKConfigVar{}, SortKItem{}}(\dv{SortKConfigVar{}}(
HERE
  echo -n '"$' >> $input_file
  echo -n "$param" >> $input_file
  echo '"' >> $input_file

  cat <<HERE >> $input_file
)),
HERE
  var_name="params_$param"
  echo "${!var_name}" >> $input_file

  cat <<HERE >> $input_file
))
HERE

done

cat <<HERE >> $input_file
)
HERE

set +e
(
if [ -n "$verbose" ]; then
  set -x
fi
$debug "$dir"/interpreter "$input_file" $depth "$output_file"
)
EXIT=$?
set -e

if [ -n "${real_output_file}" ]; then
  if $pretty_print; then
  "$(dirname "$0")/kprint" "$dir" "$output_file" > "$real_output_file"
  else
    mv -f "$output_file" "$real_output_file"
  fi
elif $pretty_print; then
  "$(dirname "$0")/kprint" "$dir" "$output_file"
else
  cat "$output_file"
fi

exit $EXIT
